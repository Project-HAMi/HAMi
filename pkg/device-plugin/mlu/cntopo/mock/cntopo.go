// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Cambricon/cambricon-k8s-device-plugin/device-plugin/pkg/cntopo (interfaces: Cntopo)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	cntopo "github.com/Project-HAMi/HAMi/pkg/device-plugin/mlu/cntopo"
	gomock "github.com/golang/mock/gomock"
)

// Cntopo is a mock of Cntopo interface.
type Cntopo struct {
	ctrl     *gomock.Controller
	recorder *CntopoMockRecorder
}

// CntopoMockRecorder is the mock recorder for Cntopo.
type CntopoMockRecorder struct {
	mock *Cntopo
}

// NewCntopo creates a new mock instance.
func NewCntopo(ctrl *gomock.Controller) *Cntopo {
	mock := &Cntopo{ctrl: ctrl}
	mock.recorder = &CntopoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Cntopo) EXPECT() *CntopoMockRecorder {
	return m.recorder
}

// GetRings mocks base method.
func (m *Cntopo) GetRings(arg0 []uint, arg1 int) ([]cntopo.Ring, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRings", arg0, arg1)
	ret0, _ := ret[0].([]cntopo.Ring)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRings indicates an expected call of GetRings.
func (mr *CntopoMockRecorder) GetRings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRings", reflect.TypeOf((*Cntopo)(nil).GetRings), arg0, arg1)
}
