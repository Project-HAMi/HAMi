name: CI Workflow
on:
  # Run this workflow every time a new commit pushed to upstream/fork repository.
  # Run workflow on fork repository will help contributors find and resolve issues before sending a PR.
  pull_request:
  push:
    # Exclude branches created by Dependabot to avoid triggering current workflow
    # for PRs initiated by Dependabot.
    branches-ignore:
      - 'dependabot/**'
permissions:
  contents: read  # for actions/checkout to fetch code

env:
  REGISTRY: docker.io
  IMAGE_REPO: ${{ secrets.IMAGE_REPO || 'projecthami/hami' }}
  IMAGE_ROOT_PATH: docker
  BUILD_PLATFORM: linux/arm64,linux/amd64
  REGISTER_USER: ${{ github.actor }}
  REGISTER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  #  lint:
  #    name: lint
  #    runs-on: ubuntu-22.04
  #    steps:
  #      - name: checkout code
  #        uses: actions/checkout@v4
  #      - name: install Go
  #        uses: actions/setup-go@v5
  #        with:
  #          go-version: "1.21"
  #      - name: verify license
  #        run: hack/verify-license.sh
  #      - name: go tidy
  #        run: make tidy
  #      - name: lint
  #        run: make lint
  #      - name: import alias
  #        run: hack/verify-import-aliases.sh
  #
  #  test:
  #    name: Unit test
  #    needs: lint # rely on lint successful completion
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4
  #      - name: Checkout submodule
  #        uses: Mushus/checkout-submodule@v1.0.1
  #        with:
  #          basePath: # optional, default is .
  #          submodulePath: libvgpu
  #      - name: Install Go
  #        uses: actions/setup-go@v5
  #        with:
  #          go-version: "1.21"
  #      - run: make tidy
  #      - run: make test
  #      - name: Upload coverage to Codecov
  #        # Prevent running from the forked repository that doesn't need to upload coverage.
  #        # In addition, running on the forked repository would fail as missing the necessary secret.
  #        if: ${{ github.repository == 'Project-HAMi/HAMi' }}
  #        uses: codecov/codecov-action@v5
  #        with:
  #          # Even though token upload token is not required for public repos,
  #          # but adding a token might increase successful uploads as per:
  #          # https://community.codecov.com/t/upload-issues-unable-to-locate-build-via-github-actions-api/3954
  #          token: ${{secrets.CODECOV_TOKEN}}
  #          files: ./_output/coverage/coverage.out
  #          flags: unittests
  #          fail_ci_if_error: false
  #          verbose: true

  get_version:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the version
        id: get_version
        run: |
          tag="$(git rev-parse --short HEAD)"
          echo ::set-output name=version::${tag}

#  build:
#    name: compile
#    runs-on: ubuntu-22.04
#    environment: nvidia
#    needs: get_version # rely on get_version successful completion
#    steps:
#      - uses: actions/checkout@master
#      - name: Free disk space
#        # https://github.com/actions/virtual-environments/issues/709
#        run: |
#          echo "=========original CI disk space"
#          df -h
#          sudo rm -rf "/usr/local/share/boost"
#          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
#          echo "=========after clean up, the left CI disk space"
#          df -h
#
#      - name: Check if SECRET exists
#        run: |
#          if [ -z "${{ vars.MY_VARS_NAME }}" ]; then
#            echo "Vars does not exist or is empty!"
#            exit 1
#          else
#            echo "Secret exists"
#            exit 1
#          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout submodule
        uses: Mushus/checkout-submodule@v1.0.1
        with:
          basePath: # optional, default is .
          submodulePath: libvgpu

#      - name: Docker Login
#        uses: docker/login-action@v3.3.0
#        with:
#          username: ${{ secrets.DOCKERHUB_TOKEN }}
#          password: ${{ secrets.DOCKERHUB_PASSWD }}
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          driver-opts: image=moby/buildkit:master
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}
#
#      - name: Build & Pushing hami image
#        uses: docker/build-push-action@v6.9.0
#        with:
#          context: .
#          file: ${{ env.IMAGE_ROOT_PATH }}/Dockerfile
##          labels: ${{ steps.meta.outputs.labels }}
#          labels: ${{ needs.get_version.outputs.version }}
#          platforms: ${{ env.BUILD_PLATFORM }}
#          build-args: |
#            VERSION=${{ needs.get_version.outputs.version }}
#            GOLANG_IMAGE=golang:1.22.5-bullseye
#            NVIDIA_IMAGE=nvidia/cuda:12.2.0-devel-ubuntu20.04
#            DEST_DIR=/usr/local
#          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_REPO }}:${{ needs.get_version.outputs.version }}
#          push: true
#          github-token: ${{ env.REGISTER_PASSWORD }}

  # packages tgz from /charts of original branch, deploy to /charts of target branch
#  package_chart:
#    runs-on: ubuntu-latest
#    needs: [ build, get_version ]
#    env:
#      HELM_VERSION: v3.8.1
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          ref: ${{ needs.get_ref.outputs.ref }}
#
#      - name: Configure Git
#        run: |
#          git config user.name "$GITHUB_ACTOR"
#          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
#
#      - name: Install Helm
#        uses: azure/setup-helm@v4
#        with:
#          version: ${{ env.HELM_VERSION }}
#
#      - name: Get the version
#        id: get_version
#        run: |
#          tag="$(git rev-parse --short HEAD)"
#          echo ::set-output name=VERSION::${tag}
#
#      - name: Lint helm chart
#        run: |
#          make lint_chart
#
#      - name: Package Chart
#        continue-on-error: false
#        run: |
#          cd charts
#          make clean
#          make
#          if ! ls *.tgz &>/dev/null ; then
#            echo "failed to generate chart"
#            exit 1
#          fi
#          cd ..
#          mkdir -p tmp
#          mv charts/*.tgz tmp
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v4.4.3
#        with:
#          name: chart_package_artifact
#          path: tmp/*
#          retention-days: 1
#          if-no-files-found: error

  # execute a full e2e test when hami code merge
#  release-e2e:
#    uses: ./.github/workflows/call-e2e.yaml
##    needs: [ package_chart, get_version]
#    needs: [ get_version]
#    with:
#      ref: ${{ needs.get_version.outputs.version }}
#      type: "pullrequest"
